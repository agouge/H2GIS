-- Calculate the shortest paths.
DROP TABLE IF EXISTS SP1_2;
CREATE TABLE SP1_2 AS
    SELECT * FROM
    ST_ShortestPath('EDGES_EO_W', 'directed - EDGE_ORIENTATION', 'WEIGHT', 1, 2);
DROP TABLE IF EXISTS SP1_3;
CREATE TABLE SP1_3 AS
    SELECT * FROM
    ST_ShortestPath('EDGES_EO_W', 'directed - EDGE_ORIENTATION','WEIGHT', 1, 3);
DROP TABLE IF EXISTS SP1_4;
CREATE TABLE SP1_4 AS
    SELECT * FROM
    ST_ShortestPath('EDGES_EO_W', 'directed - EDGE_ORIENTATION', 'WEIGHT', 1, 4);
DROP TABLE IF EXISTS SP1_5;
CREATE TABLE SP1_5 AS
    SELECT * FROM
    ST_ShortestPath('EDGES_EO_W', 'directed - EDGE_ORIENTATION', 'WEIGHT', 1, 5);
DROP TABLE IF EXISTS SP2_1;
CREATE TABLE SP2_1 AS
    SELECT * FROM
    ST_ShortestPath('EDGES_EO_W', 'directed - EDGE_ORIENTATION', 2, 1);
DROP TABLE IF EXISTS SP2_3;
CREATE TABLE SP2_3 AS
    SELECT * FROM
    ST_ShortestPath('EDGES_EO_W', 'directed - EDGE_ORIENTATION', 'WEIGHT', 2, 3);
DROP TABLE IF EXISTS SP2_4;
CREATE TABLE SP2_4 AS
    SELECT * FROM
    ST_ShortestPath('EDGES_EO_W', 'directed - EDGE_ORIENTATION', 'WEIGHT', 2, 4);
DROP TABLE IF EXISTS SP2_5;
CREATE TABLE SP2_5 AS
    SELECT * FROM
    ST_ShortestPath('EDGES_EO_W', 'directed - EDGE_ORIENTATION', 'WEIGHT', 2, 5);
DROP TABLE IF EXISTS SP3_1;
CREATE TABLE SP3_1 AS
    SELECT * FROM
    ST_ShortestPath('EDGES_EO_W', 'directed - EDGE_ORIENTATION', 'WEIGHT', 3, 1);
DROP TABLE IF EXISTS SP3_2;
CREATE TABLE SP3_2 AS
    SELECT * FROM
    ST_ShortestPath('EDGES_EO_W', 'directed - EDGE_ORIENTATION', 'WEIGHT', 3, 2);
DROP TABLE IF EXISTS SP3_4;
CREATE TABLE SP3_4 AS
    SELECT * FROM
    ST_ShortestPath('EDGES_EO_W', 'directed - EDGE_ORIENTATION', 'WEIGHT', 3, 4);
DROP TABLE IF EXISTS SP3_5;
CREATE TABLE SP3_5 AS
    SELECT * FROM
    ST_ShortestPath('EDGES_EO_W', 'directed - EDGE_ORIENTATION', 'WEIGHT', 3, 5);
DROP TABLE IF EXISTS SP4_1;
CREATE TABLE SP4_1 AS
    SELECT * FROM
    ST_ShortestPath('EDGES_EO_W', 'directed - EDGE_ORIENTATION', 'WEIGHT', 4, 1);
DROP TABLE IF EXISTS SP4_2;
CREATE TABLE SP4_2 AS
    SELECT * FROM
    ST_ShortestPath('EDGES_EO_W', 'directed - EDGE_ORIENTATION', 'WEIGHT', 4, 2);
DROP TABLE IF EXISTS SP4_3;
CREATE TABLE SP4_3 AS
    SELECT * FROM
    ST_ShortestPath('EDGES_EO_W', 'directed - EDGE_ORIENTATION', 'WEIGHT', 4, 3);
DROP TABLE IF EXISTS SP4_5;
CREATE TABLE SP4_5 AS
    SELECT * FROM
    ST_ShortestPath('EDGES_EO_W', 'directed - EDGE_ORIENTATION', 'WEIGHT', 4, 5);
DROP TABLE IF EXISTS SP5_1;
CREATE TABLE SP5_1 AS
    SELECT * FROM
    ST_ShortestPath('EDGES_EO_W', 'directed - EDGE_ORIENTATION', 'WEIGHT', 5, 1);
DROP TABLE IF EXISTS SP5_2;
CREATE TABLE SP5_2 AS
    SELECT * FROM
    ST_ShortestPath('EDGES_EO_W', 'directed - EDGE_ORIENTATION', 'WEIGHT', 5, 2);
DROP TABLE IF EXISTS SP5_3;
CREATE TABLE SP5_3 AS
    SELECT * FROM
    ST_ShortestPath('EDGES_EO_W', 'directed - EDGE_ORIENTATION', 'WEIGHT', 5, 3);
DROP TABLE IF EXISTS SP5_4;
CREATE TABLE SP5_4 AS
    SELECT * FROM
    ST_ShortestPath('EDGES_EO_W', 'directed - EDGE_ORIENTATION', 'WEIGHT', 5, 4);

-- Construct the number of shortest paths matrix.
DROP TABLE IF EXISTS N_SP;
CREATE TABLE N_SP(SOURCE INT, DESTINATION INT, N_SPS INT);
@loop 5 INSERT INTO N_SP VALUES (?+1, ?+1, 1);
INSERT INTO N_SP VALUES (1, 2, SELECT MAX(PATH_ID) FROM SP1_2);
INSERT INTO N_SP VALUES (1, 3, SELECT MAX(PATH_ID) FROM SP1_3);
INSERT INTO N_SP VALUES (1, 4, SELECT MAX(PATH_ID) FROM SP1_4);
INSERT INTO N_SP VALUES (1, 5, SELECT MAX(PATH_ID) FROM SP1_5);
INSERT INTO N_SP VALUES (2, 1, SELECT MAX(PATH_ID) FROM SP2_1);
INSERT INTO N_SP VALUES (2, 3, SELECT MAX(PATH_ID) FROM SP2_3);
INSERT INTO N_SP VALUES (2, 4, SELECT MAX(PATH_ID) FROM SP2_4);
INSERT INTO N_SP VALUES (2, 5, SELECT MAX(PATH_ID) FROM SP2_5);
INSERT INTO N_SP VALUES (3, 1, SELECT MAX(PATH_ID) FROM SP3_1);
INSERT INTO N_SP VALUES (3, 2, SELECT MAX(PATH_ID) FROM SP3_2);
INSERT INTO N_SP VALUES (3, 4, SELECT MAX(PATH_ID) FROM SP3_4);
INSERT INTO N_SP VALUES (3, 5, SELECT MAX(PATH_ID) FROM SP3_5);
INSERT INTO N_SP VALUES (4, 1, SELECT MAX(PATH_ID) FROM SP4_1);
INSERT INTO N_SP VALUES (4, 2, SELECT MAX(PATH_ID) FROM SP4_2);
INSERT INTO N_SP VALUES (4, 3, SELECT MAX(PATH_ID) FROM SP4_3);
INSERT INTO N_SP VALUES (4, 5, SELECT MAX(PATH_ID) FROM SP4_5);
INSERT INTO N_SP VALUES (5, 1, SELECT MAX(PATH_ID) FROM SP5_1);
INSERT INTO N_SP VALUES (5, 2, SELECT MAX(PATH_ID) FROM SP5_2);
INSERT INTO N_SP VALUES (5, 3, SELECT MAX(PATH_ID) FROM SP5_3);
INSERT INTO N_SP VALUES (5, 4, SELECT MAX(PATH_ID) FROM SP5_4);
SELECT * FROM N_SP ORDER BY SOURCE, DESTINATION;

DROP TABLE IF EXISTS N_SPS_CONTAINING;
CREATE TABLE N_SPS_CONTAINING(SOURCE INT, DESTINATION INT, V_CONTAINED INT, N INT);
@loop 5 INSERT INTO N_SPS_CONTAINING
    VALUES (1, 2, ?+1, SELECT COUNT(DISTINCT PATH_ID) FROM SP1_2
                        WHERE (SOURCE=?+1 OR DESTINATION=?+1));
@loop 5 INSERT INTO N_SPS_CONTAINING
    VALUES (1, 3, ?+1, SELECT COUNT(DISTINCT PATH_ID) FROM SP1_3
                        WHERE (SOURCE=?+1 OR DESTINATION=?+1));
@loop 5 INSERT INTO N_SPS_CONTAINING
    VALUES (1, 4, ?+1, SELECT COUNT(DISTINCT PATH_ID) FROM SP1_4
                        WHERE (SOURCE=?+1 OR DESTINATION=?+1));
@loop 5 INSERT INTO N_SPS_CONTAINING
    VALUES (1, 5, ?+1, SELECT COUNT(DISTINCT PATH_ID) FROM SP1_5
                        WHERE (SOURCE=?+1 OR DESTINATION=?+1));
@loop 5 INSERT INTO N_SPS_CONTAINING
    VALUES (2, 1, ?+1, SELECT COUNT(DISTINCT PATH_ID) FROM SP2_1
                        WHERE (SOURCE=?+1 OR DESTINATION=?+1));
@loop 5 INSERT INTO N_SPS_CONTAINING
    VALUES (2, 3, ?+1, SELECT COUNT(DISTINCT PATH_ID) FROM SP2_3
                        WHERE (SOURCE=?+1 OR DESTINATION=?+1));
@loop 5 INSERT INTO N_SPS_CONTAINING
    VALUES (2, 4, ?+1, SELECT COUNT(DISTINCT PATH_ID) FROM SP2_4
                        WHERE (SOURCE=?+1 OR DESTINATION=?+1));
@loop 5 INSERT INTO N_SPS_CONTAINING
    VALUES (2, 5, ?+1, SELECT COUNT(DISTINCT PATH_ID) FROM SP2_5
                        WHERE (SOURCE=?+1 OR DESTINATION=?+1));
@loop 5 INSERT INTO N_SPS_CONTAINING
    VALUES (3, 1, ?+1, SELECT COUNT(DISTINCT PATH_ID) FROM SP3_1
                        WHERE (SOURCE=?+1 OR DESTINATION=?+1));
@loop 5 INSERT INTO N_SPS_CONTAINING
    VALUES (3, 2, ?+1, SELECT COUNT(DISTINCT PATH_ID) FROM SP3_2
                        WHERE (SOURCE=?+1 OR DESTINATION=?+1));
@loop 5 INSERT INTO N_SPS_CONTAINING
    VALUES (3, 4, ?+1, SELECT COUNT(DISTINCT PATH_ID) FROM SP3_4
                        WHERE (SOURCE=?+1 OR DESTINATION=?+1));
@loop 5 INSERT INTO N_SPS_CONTAINING
    VALUES (3, 5, ?+1, SELECT COUNT(DISTINCT PATH_ID) FROM SP3_5
                        WHERE (SOURCE=?+1 OR DESTINATION=?+1));
@loop 5 INSERT INTO N_SPS_CONTAINING
    VALUES (4, 1, ?+1, SELECT COUNT(DISTINCT PATH_ID) FROM SP4_1
                        WHERE (SOURCE=?+1 OR DESTINATION=?+1));
@loop 5 INSERT INTO N_SPS_CONTAINING
    VALUES (4, 2, ?+1, SELECT COUNT(DISTINCT PATH_ID) FROM SP4_2
                        WHERE (SOURCE=?+1 OR DESTINATION=?+1));
@loop 5 INSERT INTO N_SPS_CONTAINING
    VALUES (4, 3, ?+1, SELECT COUNT(DISTINCT PATH_ID) FROM SP4_3
                        WHERE (SOURCE=?+1 OR DESTINATION=?+1));
@loop 5 INSERT INTO N_SPS_CONTAINING
    VALUES (4, 5, ?+1, SELECT COUNT(DISTINCT PATH_ID) FROM SP4_5
                        WHERE (SOURCE=?+1 OR DESTINATION=?+1));
@loop 5 INSERT INTO N_SPS_CONTAINING
    VALUES (5, 1, ?+1, SELECT COUNT(DISTINCT PATH_ID) FROM SP5_1
                        WHERE (SOURCE=?+1 OR DESTINATION=?+1));
@loop 5 INSERT INTO N_SPS_CONTAINING
    VALUES (5, 2, ?+1, SELECT COUNT(DISTINCT PATH_ID) FROM SP5_2
                        WHERE (SOURCE=?+1 OR DESTINATION=?+1));
@loop 5 INSERT INTO N_SPS_CONTAINING
    VALUES (5, 3, ?+1, SELECT COUNT(DISTINCT PATH_ID) FROM SP5_3
                        WHERE (SOURCE=?+1 OR DESTINATION=?+1));
@loop 5 INSERT INTO N_SPS_CONTAINING
    VALUES (5, 4, ?+1, SELECT COUNT(DISTINCT PATH_ID) FROM SP5_4
                        WHERE (SOURCE=?+1 OR DESTINATION=?+1));
SELECT * FROM N_SPS_CONTAINING
    WHERE V_CONTAINED!=SOURCE AND V_CONTAINED!=DESTINATION
    ORDER BY V_CONTAINED, SOURCE, DESTINATION;

DROP TABLE IF EXISTS BETW;
CREATE TABLE BETW(V INT, BETW DOUBLE);
@loop 5 INSERT INTO BETW VALUES
    (?+1, SELECT SUM(CAST(A.N AS DOUBLE) / B.N_SPS)
            FROM N_SPS_CONTAINING A, N_SP B
           WHERE A.V_CONTAINED!=A.SOURCE AND A.V_CONTAINED!=A.DESTINATION
             AND A.V_CONTAINED=?+1
             AND A.SOURCE=B.SOURCE AND A.DESTINATION = B.DESTINATION);

-- Normalize betweenness
DROP TABLE IF EXISTS BETW_NORM;
CREATE TABLE BETW_NORM AS
    SELECT V,
           (BETW - (SELECT MIN(BETW) FROM BETW)) /
             ((SELECT MAX(BETW) FROM BETW) -
              (SELECT MIN(BETW) FROM BETW)) NORM_BETW FROM BETW;
SELECT * FROM BETW_NORM;
-- | V |           NORM_BETW |
-- |--:|--------------------:|
-- | 1 |  0.3333333333333333 |
-- | 2 | 0.16666666666666666 |
-- | 3 |                 1.0 |
-- | 4 |                 0.0 |
-- | 5 |                 1.0 |

CREATE TABLE EDGES_EO_W_CC AS
    SELECT * FROM EDGES_EO_W WHERE EDGE_ID<11;
CALL ST_GraphAnalysis('EDGES_EO_W_CC', 'directed - EDGE_ORIENTATION', 'WEIGHT');
SELECT * FROM EDGES_EO_W_CC_NODE_CENT;
-- | NODE_ID |         BETWEENNESS |          CLOSENESS |
-- |--------:|--------------------:|-------------------:|
-- |       1 |  0.3333333333333333 |                0.8 |
-- |       2 | 0.16666666666666666 |                0.5 |
-- |       3 |                 1.0 |                0.8 |
-- |       4 |                 0.0 | 0.6666666666666666 |
-- |       5 |                 1.0 | 0.6666666666666666 |
